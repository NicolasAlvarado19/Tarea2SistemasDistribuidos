version: '3.8'

services:
  # ==================== BASE DE DATOS ====================
  postgres:
    image: postgres:15-alpine
    container_name: postgres-tarea2
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - tarea2-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis-tarea2
    command: redis-server --maxmemory ${REDIS_MAX_MEMORIA} --maxmemory-policy ${REDIS_POLITICA_EXPULSION}
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - tarea2-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==================== KAFKA ====================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper-tarea2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - tarea2-net
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-tarea2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - tarea2-net
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-tarea2
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: tarea2
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - tarea2-net
    restart: unless-stopped

  # ==================== SERVICIOS EXISTENTES ====================
  puntuacion:
    build: ./servicio-puntuacion
    container_name: puntuacion-tarea2
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - EMBEDDINGS_MODEL_NAME=${EMBEDDINGS_MODEL_NAME}
    ports:
      - "${PUERTO_PUNTUACION}:8002"
    networks:
      - tarea2-net
    restart: unless-stopped

  cache:
    build: ./servicio-cache
    container_name: cache-tarea2
    depends_on:
      - redis
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - TAMANIO_CACHE=${TAMANIO_CACHE}
    ports:
      - "${PUERTO_CACHE}:8001"
    networks:
      - tarea2-net
    restart: unless-stopped

  almacenamiento:
    build: ./servicio-almacenamiento
    container_name: almacenamiento-tarea2
    depends_on:
      - postgres
      - kafka
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "${PUERTO_ALMACENAMIENTO}:8000"
    networks:
      - tarea2-net
    restart: unless-stopped
    command: python almacenamiento_consumer.py

  # ==================== SERVICIOS NUEVOS ====================
  kafka-consumer:
    build: ./kafka-consumer
    container_name: kafka-consumer-tarea2
    depends_on:
      - kafka
      - puntuacion
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PUNTUACION_URL=http://puntuacion:8002
      - MAX_REINTENTOS=${MAX_REINTENTOS}
      - BACKOFF_BASE=${BACKOFF_BASE}
      - GEMINI_API_KEY=AIzaSyCQKhjTFe0K33Ikd1IYSx4WrCgqNT1Re60
      - GEMINI_MODEL=gemini-flash-latest
    networks:
      - tarea2-net
    restart: unless-stopped

  reintentador:
    build: ./reintentador
    container_name: reintentador-tarea2
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - tarea2-net
    restart: unless-stopped

    
  puntuacion-consumer:
    build: ./puntuacion-consumer
    container_name: puntuacion-consumer-tarea2
    depends_on:
      - kafka
      - puntuacion
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PUNTUACION_URL=http://puntuacion:8002
      - UMBRAL_SCORE=0.6
      - MAX_REINTENTOS_SCORE=2
    networks:
      - tarea2-net
    restart: unless-stopped

  generador-trafico:
    build:
      context: ./generador-trafico
      dockerfile: Dockerfile
    container_name: generador-tarea2
    ports:
      - "8003:8000"
    volumes:                                   
      - ./datos:/datos                          
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=tarea2_db
      - POSTGRES_USER=tarea2_user
      - POSTGRES_PASSWORD=tarea2_password
      - CACHE_URL=http://cache:8001
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - tarea2-net
    restart: always

# ==================== REDES Y VOLUMENES ====================
networks:
  tarea2-net:
    driver: bridge

volumes:
  postgres-data:
